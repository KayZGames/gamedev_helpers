import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:path/path.dart' as path;
import 'package:git/git.dart';

Future<void> main() async {
  const targetBranch = 'gh-pages';
  const targetDir = 'web';
  const commitMessage = 'autogenerated gh-pages';
  final gitDir = await GitDir.fromExisting(path.current);

  // create a temp dir to dump 'pub build' output to
  final tempDir =
      await Directory.systemTemp.createTemp('ghp.$_secondsSinceEpoch.');

  try {
    final pubArgs = ['build', '--output', tempDir.path, targetDir];
    await execute('pub.bat', pubArgs);

    final commit = await gitDir.updateBranchWithDirectoryContents(
        targetBranch, path.join(tempDir.path, targetDir), commitMessage);

    if (commit == null) {
      print('There was no change in branch. No commit created.');
    } else {
      print('''
Branch "$targetBranch" was updated with "pub build" output from "$targetDir".''');
    }
  } on Exception catch (e, stack) {
    print(e);
    if (e is! String) {
      print(stack);
    }
  } finally {
    await tempDir.delete(recursive: true);
  }
}

Future<void> execute(String exec, List<String> args) async {
  final process = await Process.start(exec, args);

  process.stdout
      .transform(systemEncoding.decoder)
      .transform(const LineSplitter())
      .listen((line) {
    stdout.writeln(line);
  });

  process.stderr
      .transform(systemEncoding.decoder)
      .transform(const LineSplitter())
      .listen((line) {
    stderr.writeln(line);
  });

  final exitCode = await process.exitCode;

  if (exitCode != 0) {
    throw Exception('Error running $exec ${args.join(' ')}');
  }
}

int _secondsSinceEpoch = DateTime.now().toUtc().millisecondsSinceEpoch;
